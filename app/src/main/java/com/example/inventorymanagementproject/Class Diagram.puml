@startuml
'https://plantuml.com/class-diagram}

'class FirebaseManager {
'    -static FirebaseManager instance
'    -final FirebaseAuth mAuth
'    -final FirebaseFirestore db
'    -FirebaseManager()
'
'    +static synchronized getInstance()
'    +getAuth(): FirebaseAuth
'    +getDb(): FirebaseFirestore
'    +CreateUser(): void
'    +LogInUser(): void
'}

class User {
    -String id
    -String username
    -String email
    -String role
}

abstract class AbstractItem {
    +AbstractItem(Type type)
    +buildClothing() : IBuilder
    +buildElectronic() : IBuilder
    +buildFurniture() : IBuilder
}

class ItemFactory extends AbstractItem {
    +buildClothing() : IBuilder
    +buildElectronic() : IBuilder
    +buildFurniture() : IBuilder
}

enum Type {
    Electronic
    Clothing
    Furniture
}

interface IBuilder {
    +SetID(id: String)
    +SetName(name: String)
    +SetBrand(brand: String)
    +SetPrice(price: String)
    +SetDesc(desc: String)
    +SetQuantity(quantity: String)
    +SetType(type: String)
    +SetStatus(status: String)
    +getItem(): Item
}

class ClothingBuilder implements IBuilder {
    +Item item;
}
class ElectronicBuilder implements IBuilder {
    +Item item;
}
class FurnitureBuilder implements IBuilder {
    +Item item;
}

class Engineer {
    -IBuilder iBuilder

    +Engineer(IBuilder iBuilder)
    +BuildItem(Items item): void
}

class Items {
    -String id
    -String name
    -String brand
    -double price
    -String desc
    -int quantity
    -String status
}

class ValidationHandler {
    +handle(): void
}

class FirebaseLogInHandler extends ValidationHandler {
    #ValidationHandler nextHandler

    +setNext(next: ValidationHandler): void
    +handle(): void
}

class ValidationManager {
    +String username;
    +String password;
    +String role;

    +ValidationManager(): void
}

class InventoryFacade {
    +InventoryFacade()
    +updateItem(): void
    +createItem(): void
    +deleteItem(): void
}

class UserListFacade {
    +UserListFacade(): void
    +deleteUser(): void
}

enum ItemState {
    AVAILABLE("Available"),
    UNAVAILABLE("Out of Stock");

    +string status
    +ItemState(String status)
    +getStatus(): String
    +setState (quantity: int): ItemState
}

abstract class RoleAuthorization {
    +ConfigureAuth(): void
    +CommonRoles(): void
    +SpecificRoles() : void
}

class ClientAuthorization extends RoleAuthorization {
    ~SpecificRoles(role: String, activity: Activity): void
}

class AdminAuthorization extends RoleAuthorization {
    ~SpecificRoles(role: String, activity: Activity): void
}

class StaffAuthorization extends RoleAuthorization {
    ~SpecificRoles(role: String, activity: Activity): void
}

class OrderDialog() {
    -Dialog dialog
    -Activity activity
    -FirebaseManager mng
    -FirebaseFirestore db
}

ItemFactory --|> AbstractItem
FirebaseLogInHandler --|> ValidationHandler
ClientAuthorization --|> RoleAuthorization
AdminAuthorization --|> RoleAuthorization
StaffAuthorization --|> RoleAuthorization

ClothingBuilder ..|> IBuilder
ElectronicBuilder ..|> IBuilder
FurnitureBuilder ..|> IBuilder

Engineer --> IBuilder
Engineer --> Items
ClothingBuilder --> Items
ElectronicBuilder --> Items
FurnitureBuilder --> Items
AbstractItem --> Type
ItemFactory --> IBuilder


ValidationManager --> FirebaseLogInHandler
UserListFacade --> User
InventoryFacade --> Items

Items --> ItemState

@enduml